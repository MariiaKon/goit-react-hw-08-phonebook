{"version":3,"file":"static/js/709.62aef41b.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Forms/Form.styled.jsx","components/Forms/FormElement.jsx","components/Forms/ContactForm.jsx","hooks/useFomHandler.js","components/Forms/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Usermenu/Usermenu.styled.jsx","components/Usermenu/Usermenu.jsx","views/Contacts/ContactsView.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport function Button({\n  type = 'button',\n  content = '',\n  className = '',\n  onClick,\n  disabled = false,\n}) {\n  return (\n    <button\n      type={type}\n      className={className}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {content}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 1px solid #fadccd;\n  background: #9b7369;\n  padding: 20px 10px 10px 10px;\n  margin: 20px auto;\n  width: 90%;\n  max-width: 600px;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n  margin-bottom: 20px;\n  background: inherit;\n\n  & span {\n    position: absolute;\n    display: inline-block;\n    font-size: 14px;\n    line-height: 14px;\n    text-transform: uppercase;\n    top: calc(50% - 14px / 2);\n    left: 10px;\n    color: #fadccd7f;\n    transition: 250ms ease-in-out;\n  }\n`;\n\nexport const Input = styled.input`\n  border: 1px solid #fadccd7f;\n  border-radius: 5px;\n  height: 36px;\n  padding: 14px 10px 6px 10px;\n  font-size: 16px;\n  width: 100%;\n  background: inherit;\n  color: #fadccd;\n  font-weight: 600;\n\n  &:hover {\n    outline: 1px solid #fadccd7f;\n  }\n\n  &:focus {\n    outline: 1px solid #fadccd;\n  }\n\n  &:focus ~ span,\n  &:valid ~ span {\n    top: -8px;\n    left: 14px;\n    font-size: 9px;\n    font-weight: 600;\n    padding: 0 4px;\n    color: #fadccd;\n    background: inherit;\n  }\n`;\n\nexport const FilterForm = styled.form`\n  background: inherit;\n  margin: 10px auto;\n  width: 90%;\n\n  & input {\n    padding: 10px;\n  }\n\n  & input::placeholder {\n    font-size: 14px;\n    line-height: 14px;\n    color: #fadccd7f;\n    font-weight: 400;\n    text-transform: uppercase;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Form } from './Form.styled';\nimport { Button } from 'components/Button/Button';\n\nexport function FormElement({\n  initValues = {},\n  btnContent = '',\n  onSubmit = function (e, formHandler, successHandler) {\n    e.preventDefault();\n    formHandler({});\n    successHandler(e);\n  },\n  children,\n}) {\n  return (\n    <Form onSubmit={onSubmit}>\n      {children}\n      <Button type=\"submit\" content={btnContent} className=\"btn\" />\n    </Form>\n  );\n}\n\nFormElement.propTypes = {\n  initValues: PropTypes.object,\n  btnContent: PropTypes.string,\n  onSubmit: PropTypes.func,\n  children: PropTypes.element,\n};\n","import { FormElement } from './FormElement';\nimport { Label, Input } from './Form.styled';\nimport InputMask from 'react-input-mask';\nimport { useFormHandler } from 'hooks/useFomHandler';\n\nexport function ContactForm({\n  initValues = {\n    name: '',\n    number: '',\n  },\n}) {\n  const { formSubmitHandler, reset } = useFormHandler(initValues);\n\n  return (\n    <FormElement\n      btnContent=\"Add contact\"\n      onSubmit={e => {\n        e.preventDefault();\n        formSubmitHandler({\n          name: e.target.name.value,\n          number: e.target.number.value,\n        });\n        reset(e);\n      }}\n      children={\n        <>\n          <Label>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' - .][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dot, dash and spaces. For example Anne-Mary Mercer, Mr. Charles, Castelmore d'Artagnan\"\n              required\n              defaultValue={initValues.name}\n              autoComplete=\"off\"\n            />\n            <span>Name</span>\n          </Label>\n          <Label>\n            <InputMask mask=\"999-999-9999\" maskChar=\"*\">\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                title=\"Phone number must be digits\"\n                required\n                defaultValue={initValues.number}\n                autoComplete=\"off\"\n              />\n            </InputMask>\n            <span>Number</span>\n          </Label>\n        </>\n      }\n    ></FormElement>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { useAddContactMutation } from 'redux/contacts/contactReducer';\n\nexport const useFormHandler = initValues => {\n  const [addContact] = useAddContactMutation();\n\n  const existingContactsArr = useSelector(\n    state => Object.values(state.contacts?.queries)[0]?.data\n  );\n\n  const formSubmitHandler = async contact => {\n    const existingContacts = existingContactsArr.map(contact => contact.name);\n\n    if (existingContacts.includes(contact.name)) {\n      alert(`${contact.name} is already exists`);\n      return;\n    }\n\n    try {\n      await addContact(contact);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const reset = e => {\n    e.target.name.value = initValues.name;\n    e.target.number.value = initValues.number;\n  };\n\n  return { formSubmitHandler, reset };\n};\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactReducer';\nimport { DebounceInput } from 'react-debounce-input';\nimport { Label, Input, FilterForm } from './Form.styled';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterForm>\n      <Label>\n        <DebounceInput\n          element={Input}\n          debounceTimeout={300}\n          placeholder={'Find contacts by name'}\n          onChange={e => {\n            dispatch(filterContacts(e.target.value));\n          }}\n        />\n      </Label>\n    </FilterForm>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Contacts = styled.ul`\n  margin: auto;\n  width: 90%;\n  list-style: none;\n  border: 1px solid #fadccd;\n  color: #0d0c0c;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px;\n  font-size: 18px;\n\n  &:nth-of-type(odd) {\n    background-color: #9b7369;\n  }\n\n  &:nth-of-type(even) {\n    background-color: #b98775;\n  }\n\n  :hover > div > div {\n    transform: scale(1.1);\n  }\n`;\n\nexport const ButtonsBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 90px;\n`;\n\nexport const InfoBox = styled.div`\n  display: grid;\n  grid-template-columns: 40px 1fr;\n  grid-template-rows: repeat(2, 1fr);\n  grid-column-gap: 10px;\n`;\n\nexport const Info = styled.div`\n  &:nth-of-type(even) {\n    grid-area: 1 / 2 / 2 / 3;\n    font-weight: 500;\n  }\n\n  &:nth-of-type(odd) {\n    grid-area: 2 / 2 / 3 / 3;\n  }\n`;\n\nexport const Icon = styled.div`\n  grid-area: 1 / 1 / 3 / 2;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 1px solid #0d0c0c;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  font-weight: 700;\n  color: #fadccd;\n  text-shadow: #0d0c0c 0 0 4px;\n`;\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport { RiBallPenLine, RiCloseLine } from 'react-icons/ri';\nimport { Button } from 'components/Button/Button';\nimport {\n  Contacts,\n  ContactItem,\n  InfoBox,\n  Info,\n  Icon,\n  ButtonsBox,\n} from './ContactList.styled';\nimport { useDeleteContactMutation } from 'redux/contacts/contactReducer';\n\nexport function ContactList({ contacts }) {\n  const [deleteContact, result] = useDeleteContactMutation();\n  const navigate = useNavigate();\n\n  return (\n    <Contacts>\n      {contacts?.map(contact => {\n        return (\n          <ContactItem key={contact.id}>\n            <InfoBox>\n              <Icon\n                style={{\n                  background: `#${Math.floor(\n                    Math.random() * 100000000 * contact.id\n                  )\n                    .toString(16)\n                    .slice(0, 6)}`,\n                }}\n              >\n                {contact.name[0].toUpperCase()}\n              </Icon>\n              <Info>{contact.name}</Info>\n              <Info>{contact.number}</Info>\n            </InfoBox>\n\n            <ButtonsBox>\n              <Button\n                type=\"button\"\n                onClick={() => navigate(`/edit/${contact.id}`)}\n                disabled={result.isLoading}\n                content={<RiBallPenLine style={{ top: '6px', left: '6px' }} />}\n              />\n              <Button\n                type=\"button\"\n                onClick={() => {\n                  deleteContact(contact.id);\n                }}\n                disabled={result.isLoading}\n                content={\n                  <RiCloseLine\n                    style={{\n                      top: '4px',\n                      left: '4px',\n                      height: '1.25em',\n                      width: '1.25em',\n                    }}\n                  />\n                }\n              />\n            </ButtonsBox>\n          </ContactItem>\n        );\n      })}\n    </Contacts>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  max-width: 600px;\n  width: calc(100vw - 40px);\n  height: 60px;\n  margin: 0 auto;\n\n  & > * {\n    margin-left: 20px;\n  }\n`;\n\nexport const Login = styled.div`\n  width: fit-content;\n  font-weight: 500;\n  color: #fadccd;\n`;\n","import { useNavigate } from 'react-router-dom';\nimport { Header, Login } from './Usermenu.styled';\nimport { Button } from 'components/Button/Button';\n\nconst isLoggedIn = true;\n\nexport const Usermenu = () => {\n  const navigate = useNavigate();\n\n  return (\n    <Header>\n      {isLoggedIn ? (\n        <>\n          <Login>user@email.com</Login>\n          <Button\n            type=\"button\"\n            content=\"Log Out\"\n            className=\"btn\"\n            onClick={() => {\n              navigate('/register');\n            }}\n          ></Button>\n        </>\n      ) : (\n        <>\n          <Button\n            type=\"button\"\n            content=\"Sign Up\"\n            className=\"btn\"\n            onClick={() => {\n              navigate('/register');\n            }}\n          ></Button>\n          <Button\n            type=\"button\"\n            content=\"Log In\"\n            className=\"btn\"\n            onClick={() => {\n              navigate('/login');\n            }}\n          ></Button>\n        </>\n      )}\n    </Header>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from 'redux/contacts/contactReducer';\nimport { ContactForm } from 'components/Forms/ContactForm';\nimport { Filter } from 'components/Forms/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Usermenu } from 'components/Usermenu/Usermenu';\nimport { PrimaryTitle, SecondaryTitle, Container } from 'views/commonCss.styled';\n\nexport default function ContactsView() {\n  const { data } = useGetContactsQuery();\n  const filter = useSelector(state => state.filter.filter.toLowerCase());\n  const filteredContacts = data?.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <>\n      <Usermenu />\n      <Container>\n        <PrimaryTitle>Phonebook</PrimaryTitle>\n        <ContactForm />\n\n        <SecondaryTitle>Contacts</SecondaryTitle>\n        <Filter />\n        {filter === '' ? (\n          <ContactList contacts={data} />\n        ) : (\n          <ContactList contacts={filteredContacts} />\n        )}\n      </Container>\n    </>\n  );\n}\n"],"names":["Button","type","content","className","onClick","disabled","Form","styled","Label","Input","FilterForm","FormElement","initValues","btnContent","onSubmit","e","formHandler","successHandler","preventDefault","children","ContactForm","name","number","useAddContactMutation","addContact","existingContactsArr","useSelector","state","Object","values","contacts","queries","data","formSubmitHandler","contact","existingContacts","map","includes","alert","console","log","reset","target","value","useFormHandler","pattern","title","required","defaultValue","autoComplete","mask","maskChar","Filter","dispatch","useDispatch","DebounceInput","element","debounceTimeout","placeholder","onChange","filterContacts","Contacts","ContactItem","ButtonsBox","InfoBox","Info","Icon","ContactList","useDeleteContactMutation","deleteContact","result","navigate","useNavigate","style","background","Math","floor","random","id","toString","slice","toUpperCase","isLoading","top","left","height","width","Header","Login","Usermenu","ContactsView","useGetContactsQuery","filter","toLowerCase","filteredContacts"],"sourceRoot":""}